#!/bin/bash

# sourced by norm_common

. "$NORMDIR"/norm_common.prefix

onerror() {
    log "Package $TARNAME failed to build"
}

onexit() {
    log "$0 -- exiting, last package $TARNAME"
}

setup_traps() {
    set -eE
    set -o pipefail
    trap onerror ERR
    trap onexit EXIT
}

log() {
    DATE=`LANG=C LC_ALL=C date`
    echo "[$DATE] $@" >> "$HOME"/compile.log
    echo "$@"
}

log_success() {
    log "$0 -- Compiled $TARNAME"
}

pushd_src() {
    pushd "$COMPILEDIR"/"$TARNAME"
}

do_configure() {
    ./configure --prefix="$PREFIX" "$@" 2>&1 | tee $COMPILEDIR/$TARNAME-configure.log || exit 1
}

do_configure_outside() {
    ../"$TARNAME"/configure --prefix="$PREFIX" "$@" 2>&1 | tee $COMPILEDIR/$TARNAME-configure.log || exit 1
}

do_make() {
    PARALLEL="-j4"
    [ "$NOPARALLEL" = "1" ] && PARALLEL=
    make $PARALLEL "$@" 2>&1 | tee $COMPILEDIR/$TARNAME-make.log || exit 1
}

do_install() {
    make install "$@" 2>&1 | tee $COMPILEDIR/$TARNAME-makeinstall.log || exit 1
}

do_make_and_install() {
    do_make "$@" || exit 1
    do_install "$@" || exit 1
}

do_compile() {
    if [ -f "$TARDIR"/"$1" ]; then
        TARNAME="$1"
        shift
    fi

    SRCDIR="$COMPILEDIR"/"$TARNAME"

    pushd_src || exit 1
    do_configure "$@" || exit 1
    do_make_and_install || exit 1
    popd || exit 1
    log_success
}


do_compile_outside() {
    if [ -f "$TARDIR"/"$1" ]; then
        TARNAME="$1"
        shift
    fi

    SRCDIR="$COMPILEDIR"/"$TARNAME"
    BUILDDIR="$COMPILEDIR"/"$TARNAME"-build

    rm -rf "$BUILDDIR" || exit 1
    mkdir -p "$BUILDDIR" || exit 1
    pushd "$BUILDDIR" || exit 1
    do_configure_outside "$@" || exit 1
    do_make_and_install || exit 1
    popd || exit 1
    log_success
}

do_unpack() {
    if [ -f "$TARDIR"/"$1" ]; then
        TARNAME="$1"
        shift 1
    fi

    SRCDIR="$COMPILEDIR"/"$TARNAME"

    rm -rf "$SRCDIR"  || exit 1
    mkdir -p "$SRCDIR"  || exit 1
    tar -xf "$TARDIR/$TARNAME" -C "$SRCDIR" --strip-components 1 || exit 1
    log "$0 -- Unpacked $TARNAME"
}

##
## usage: do_undebian foo-1.2.3.orig.tar.bz2 foo-1.2.3.debian.tar.gz
## usage: do_undebian foo-1.2.3.orig.tar.bz2 foo-1.2.3.diff.tar
## unpacks source code, applies debian patches, sets TARNAME
do_undebian() {
    TARNAME="$1"
    DEBPATCH="$2"

    ## sets SRCDIR
    do_unpack "$TARNAME" || exit 1

    ## unpack debian overlay -- try tar, gzip, xz, bz
    tar -xf "$TARDIR/$DEBPATCH" -C "$SRCDIR" ||
    gzip -cd "$TARDIR/$DEBPATCH" | patch -f -p1 -i - -d "$SRCDIR" ||
    xzcat "$TARDIR/$DEBPATCH" | patch -f -p1 -i - -d "$SRCDIR" ||
    bzcat "$TARDIR/$DEBPATCH" | patch -f -p1 -i - -d "$SRCDIR" || exit 1

    ## apply debian patches
    SERIES="$SRCDIR"/debian/patches/series
    SERIES2="$SRCDIR"/debian/patches-applied/series
    if [ -e "$SERIES" ]; then
        PATCHES=`cat "$SERIES"|perl -pe "s/#.*$//g;s|^|$SRCDIR/debian/patches/|"`
    elif [ -e "$SERIES2" ]; then
        PATCHES=`cat "$SERIES2"|perl -pe "s/#.*$//g;s|^|$SRCDIR/debian/patches-applied/|"`
    elif [ -e "$SRCDIR"/debian/patches/*.patch ]; then
        PATCHES="$SRCDIR"/debian/patches/*.patch
    fi
    if [ ! -z "$PATCHES" ]; then
        for i in $PATCHES; do
            log Applying patch "$i"
            patch -f -p1 -i "$i" -d "$SRCDIR" ||
            patch -f -p0 -i "$i" -d "$SRCDIR" ||
            patch -f -p2 -i "$i" -d "$SRCDIR" || true
        done
    fi

    ## we're done
    unset PATCHES SERIES SERIES DEBPATCH
}

do_undebian_compile() {
    do_undebian "$1" "$2"
    shift 2
    do_compile "$@"
}


do_unpack_compile() {
    if [ -f "$TARDIR"/"$1" ]; then
        TARNAME="$1"
        shift 1
    fi
    do_unpack "$TARNAME"
    do_compile "$TARNAME" "$@"
}

do_patch() {
    for PATCHNAME; do
        patch -f -p1 -i "$NORMDIR"/patches/"$PATCHNAME" -d "$SRCDIR" ||
        patch -f -p0 -i "$NORMDIR"/patches/"$PATCHNAME" -d "$SRCDIR" ||
        patch -f -p2 -i "$NORMDIR"/patches/"$PATCHNAME" -d "$SRCDIR"
    done
}

do_autoreconf() {
    pushd_src || exit 1
    autoreconf -f -i -v || exit 1
    popd || exit 1
}

compile_package() {
    ## don't do for arg in "$@" -- gets overriden by package script
    while [ "$1" != "" ]; do
        [ -e "$PREFIX"/"$1".installed ] && shift && continue
        log "Building package $1"
        . "$NORMDIR"/packages/"$1"
        touch "$PREFIX"/"$1".installed
        shift
    done
}

depends_on() {
    compile_package "$@"
}

fetch_source() {
    URL="$1"
    SHA1="$2"
    TARNAME=`basename "$URL"`
    mkdir -p "$TARDIR"
    if [ ! -e "$TARDIR"/$TARNAME ]; then
        log "Downloading $URL"
        curl -L -R --xattr "$URL" -o "$TARDIR"/$TARNAME.temp || (rm -f "$TARDIR"/$TARNAME.temp && false)
        mv -f "$TARDIR"/$TARNAME{.temp,}
    fi
    SHA1SUM=`$SHASUM_BIN "$TARDIR/$TARNAME" | cut -f1 -d' '`
    [ -z "$SHA1" ] && echo "For future -- SHA1 of $TARNAME is $SHA1SUM"
    if [ ! -z "$SHA1" ] && [ "$SHA1SUM" != "$SHA1" ]; then
        log "SHA1sum mismatch! $SHA1SUM vs $SHA1"
        false
    fi
}
