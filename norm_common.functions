#!/bin/bash

onerror() {
    log "Package $TARNAME failed to build"
}

onexit() {
    log "$0 -- exiting, last package $TARNAME"
}

setup_traps() {
    set -eE
    set -o pipefail
    trap onerror ERR
    trap onexit EXIT
}

log() {
    local DATE=`LANG=C LC_ALL=C date`
    echo "[$DATE] $@" >> "$HOME"/compile.log
    echo "[norm] $@"
}

log_success() {
    log "$0 -- Compiled $TARNAME"
}

pushd_src() {
    pushd "$SRCDIR"
}

do_configure() {
    ./configure --prefix="$PREFIX" "$@" 2>&1 | $CONFIGURE_FILTER | tee $COMPILEDIR/$TARNAME-configure.log || exit 1
}

do_configure_outside() {
    "$SRCDIR"/configure --prefix="$PREFIX" "$@" 2>&1 | tee $COMPILEDIR/$TARNAME-configure.log || exit 1
}

do_make() {
    local PARALLEL="-j4"
    [ "$NOPARALLEL" = "1" ] && PARALLEL=
    make $PARALLEL "$@" 2>&1 | tee $COMPILEDIR/$TARNAME-make.log || exit 1
}

do_install() {
    make install "$@" 2>&1 | tee $COMPILEDIR/$TARNAME-makeinstall.log || exit 1
}

do_make_and_install() {
    do_make "$@" || exit 1
    do_install "$@" || exit 1
}

do_compile() {
    pushd_src || exit 1
    do_configure "$@" || exit 1
    do_make_and_install || exit 1
    popd || exit 1
    log_success
}


do_compile_outside() {
    local BUILDDIR="$SRCDIR"-build

    rm -rf "$BUILDDIR" || exit 1
    mkdir -p "$BUILDDIR" || exit 1
    pushd "$BUILDDIR" || exit 1
    do_configure_outside "$@" || exit 1
    do_make_and_install || exit 1
    popd || exit 1
    log_success
}

##
## unpacks source code
## sets global SRCDIR and TARNAME
##
## usage: do_unpack <-- gets filename from fetch_source
##
## alternative usage: do_unpack foo-1.2.3.tar.bz2
do_unpack() {
    [ -f "$TARDIR"/"$1" ] && TARNAME="$1"
    [ -z "$TARNAME" ] && echo "TARNAME is empty!" && exit 1

    SRCDIR="$COMPILEDIR"/"$TARNAME"

    rm -rf "$SRCDIR"  || exit 1
    mkdir -p "$SRCDIR"  || exit 1
    tar -xf "$TARDIR/$TARNAME" -C "$SRCDIR" --strip-components 1 || exit 1
    log "$0 -- Unpacked $TARNAME"
}

##
## unpacks source code and applies debian patches
## sets global TARNAME and DEBPATCH
##
## usage: do_undebian <-- gets filenames from fetch_source and fetch_debian
##
## alternative usage: do_undebian foo-1.2.3.orig.tar.bz2 foo-1.2.3.debian.tar.gz
do_undebian() {
    [ -f "$TARDIR"/"$1" ] && TARNAME="$1"
    [ -f "$TARDIR"/"$2" ] && DEBPATCH="$2"

    ## sets SRCDIR
    do_unpack "$TARNAME" || exit 1
    do_debianize "$DEBPATCH" || exit 1
}

##
## applies debian patches, sets global DEBPATCH
##
## usage: do_debianize <-- gets filename from fetch_debian
##
## alternative usage: do_debianize foo-1.2.3.debian.tar.gz
do_debianize() {
    [ -f "$TARDIR"/"$1" ] && DEBPATCH="$1"

    do_undebian_overlay "$DEBPATCH"
    do_debian_patches
}

do_undebian_overlay() {
    [ -f "$TARDIR"/"$1" ] && DEBPATCH="$1"

    ## unpack debian overlay -- try tar, gzip, xz, bz
    tar -xf "$TARDIR/$DEBPATCH" -C "$SRCDIR" ||
    gzip -cd "$TARDIR/$DEBPATCH" | patch -f -p1 -i - -d "$SRCDIR" ||
    xzcat "$TARDIR/$DEBPATCH" | patch -f -p1 -i - -d "$SRCDIR" ||
    bzcat "$TARDIR/$DEBPATCH" | patch -f -p1 -i - -d "$SRCDIR" || exit 1
}

do_debian_patches() {
    ## apply debian patches
    local SERIES="$SRCDIR"/debian/patches/series
    local SERIES2="$SRCDIR"/debian/patches-applied/series
    local PATCHES="$SRCDIR"/debian/patches/*.patch
    if [ -e "$SERIES" ]; then
        PATCHES=`cat "$SERIES"|perl -pe "s/#.*$//g;s|^|$SRCDIR/debian/patches/|"`
    elif [ -e "$SERIES2" ]; then
        PATCHES=`cat "$SERIES2"|perl -pe "s/#.*$//g;s|^|$SRCDIR/debian/patches-applied/|"`
    fi
    for i in $PATCHES; do
        [ -e "$i" ] || continue
        log Applying patch "$i"
        patch -f -p1 -i "$i" -d "$SRCDIR" ||
        patch -f -p0 -i "$i" -d "$SRCDIR" ||
        patch -f -p2 -i "$i" -d "$SRCDIR" || true
    done
}

##
## unpacks source code, applies debian patches, runs configure, make, install
##
## usage: do_undebian_compile <-- gets filenames from fetch_source and fetch_debian
##
## alternative usage: do_undebian_compile foo-1.2.3.orig.tar.bz2 foo-1.2.3.debian.tar.gz
do_undebian_compile() {
    if [ -f "$TARDIR"/"$1" -a -f "$TARDIR"/"$2" ]; then
        TARNAME="$1"
        DEBPATCH="$2"
        shift 2
    fi
    do_undebian
    do_compile "$@"
}

##
## unpacks source code, runs configure, make, install
##
## usage: do_unpack_compile <-- gets filename from fetch_source
##
## alternative usage: do_unpack_compile foo-1.2.3.tar.bz2
do_unpack_compile() {
    if [ -f "$TARDIR"/"$1" ]; then
        TARNAME="$1"
        shift 1
    fi
    do_unpack "$TARNAME"
    do_compile "$@"
}

##
## applies a patch in $SRCDIR, takes it from 'patches' directory in NORM
## default is -p1, but you can override that after patchname
##
## usage: do_patch gcc-4.9.2-multiarch-support.patch
## usage: do_patch binutils-multiarch-support.patch -p2
##
do_patch() {
    local PATCHNAME="$1"
    shift
    patch -p1 -f -i "$NORMDIR"/patches/"$PATCHNAME" -d "$SRCDIR" "$@"
}

do_patch_inline() {
    patch -p1 -l -N -f -d "$SRCDIR" "$@"
}

do_autoreconf() {
    pushd_src || exit 1
    autoreconf -f -i -v || exit 1
    popd || exit 1
}

## usage: compile_package FORMULA [what formula asked for this one]
compile_package() {
    local COMPILING_FOR force FORMULA
    local DATE=`LANG=C LC_ALL=C date`
    [ "$1" == "-f" ] && force=-f && shift

    FORMULA="$1"
    [ -n "$2" ] && COMPILING_FOR="$2"
    local STATEDIR="$PREFIX"/var/norm
    if [ ! -e "$STATEDIR"/"$FORMULA".installed -o -n "$force" ]; then
        [ -z "$COMPILING_FOR" ] && log "Building package: $FORMULA" \
                                || log "Building package: $FORMULA -- dependency of $COMPILING_FOR"

        . "$NORMDIR"/packages/"$FORMULA"
        mkdir -p `dirname "$STATEDIR"/"$FORMULA"`
        touch "$STATEDIR"/"$FORMULA".installed
    else
        log "Package already installed: $FORMULA"
    fi
    [ -n "$COMPILING_FOR" ] && echo "[$DATE] Needed for $COMPILING_FOR" >> "$STATEDIR"/"$FORMULA".installed || true
}

depends_on() {
    for i; do
        compile_package "$i" $FORMULA
    done
}

fetch_file() {
    [ -z "$1" ] && echo "fetch_file() needs at least 1 argument" && exit 1
    local URL="$1"
    local SHA1="$2"
    local FILENAME=`basename "$URL"`
    mkdir -p "$TARDIR"
    if [ ! -e "$TARDIR"/$FILENAME ]; then
        log "Downloading $URL"
        curl -L -R "$URL" -o "$TARDIR"/$FILENAME.temp || (rm -f "$TARDIR"/$FILENAME.temp && exit 1)
        mv -f "$TARDIR"/$FILENAME{.temp,}
    fi
    SHA1SUM=`$SHASUM_BIN "$TARDIR/$FILENAME" | cut -f1 -d' '`
    [ -z "$SHA1" ] && echo "For future -- SHA1 of $FILENAME is $SHA1SUM"
    if [ ! -z "$SHA1" ] && [ "$SHA1SUM" != "$SHA1" ]; then
        log "SHA1sum mismatch! $SHA1SUM vs $SHA1"
        false
    fi
}

fetch_source() {
    local URL="$1"
    TARNAME=`basename "$URL"`
    fetch_file "$@"
}

fetch_debian() {
    local URL="$1"
    DEBPATCH=`basename "$URL"`
    fetch_file "$@"
}

##
## check if current compiler supports various flags
##
## if yes, add it to specified variable
## if multiple flags, chooses first that's accepted
##
## example: cc_supports EXTRA_CFLAGS -march=native -march=core2 -march=i686
## example: cc_supports EXTRA_CFLAGS -Wextra
cc_supports() {
    [ -z "$1" -o -z "$2" ] && return
    local value VARNAME=$1
    shift 1
    for value; do
        echo 'int main() { int i; return 0;}' | cc -x c $CFLAGS ${!VARNAME} $value -o /dev/null - 2>/dev/null || true
        local STATUS=${PIPESTATUS[1]}
        [ -z "$STATUS" ] && continue
        [ "$STATUS" -eq 0 ] && declare -g $VARNAME="${!VARNAME} $value"
        return
    done
}

add_to_ccache() {
    mkdir -p $PREFIX/bin/ccache_wrap
    for name in "$@"; do
        ln -fs ../ccache $PREFIX/bin/ccache_wrap/"$name"
    done
}
