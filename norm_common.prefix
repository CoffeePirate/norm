#!/bin/bash

# sourced by norm_common.functions

CLEANPATH="$HOME/bin:/usr/local/bin:/usr/bin:/bin"
DEFAULT_PREFIX="$HOME/norm"
#BOOTSTRAP_PREFIX="$HOME/prefixes/bootstrap"

setup_prefix() {
    PREFIX="$1"
    DESTDIR=/tmp/stage
    STAGE=$DESTDIR/$PREFIX

    ## set compile flags
    default_ldflags="-L$PREFIX/lib"
    [[ $OSTYPE == *linux* ]] && default_ldflags+=" -Wl,-rpath=$PREFIX/lib -Wl,-rpath-link=$PREFIX/lib"
    [[ $OSTYPE == *darwin* ]] && default_ldflags+=" -Wl,-rpath -Wl,$PREFIX/lib"
    default_cppflags="-I$PREFIX/include"
    default_aclocal="$PREFIX/share/aclocal"

    export LDFLAGS="$default_ldflags"
    export CPPFLAGS="$default_cppflags"

    ## set runtime flags
    export PATH="$PREFIX/bin/ccache_wrap:$PREFIX/sbin:$PREFIX/bin:$CLEANPATH"
    export LD_LIBRARY_PATH="$PREFIX/lib"
    export LD_RUN_PATH="$PREFIX/lib"
    export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig:$PREFIX/share/pkgconfig"
    export ACLOCAL_PATH="$PREFIX/share/aclocal"
    export PERL5LIB="$PREFIX/lib/perl5"

    ## create files if they don't exist
    [ ! -e "$PREFIX/share/man" ] && mkdir -p "$PREFIX/share/man" || true
    [ ! -e "$PREFIX/man" ] && ln -s share/man $PREFIX/man || true
    [ ! -e "$PREFIX/lib" ] && mkdir -p "$PREFIX/lib" || true
    [ ! -e "$PREFIX/share/config.site" ] && generate_config_site || true
}

use_clang() {
    export CC=clang
    export CXX=clang++
    export CPPFLAGS="$CPPFLAGS -Qunused-arguments -Wno-gnu-variable-sized-type-not-at-end"
}

generate_config_site() {
## generate config.site
mkdir -p $PREFIX/share
cat << EOF > $PREFIX/share/config.site
[ -z "\$CPPFLAGS" ] && CPPFLAGS="$default_cppflags"
[ -z "\$LDFLAGS" ] && LDFLAGS="$default_ldflags"
true
EOF
}

